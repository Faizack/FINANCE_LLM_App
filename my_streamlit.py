import streamlit as st
import pandas as pd
from langchain.agents import create_csv_agent
from langchain.llms import OpenAI
from langchain.chat_models import ChatOpenAI
from IPython.display import display, Markdown
import dotenv
import os
import yfinance as yf
from dotenv import load_dotenv

def generate_crypto_responses(crypto, start_date, end_date, prompt):
    """
    This function takes a user prompt as input and uses the Langchain library to generate a response
    based on the specified cryptocurrency dataset.

    Parameters:
    -----------
    crypto: str
        A string representing the ticker symbol of the cryptocurrency to use (e.g. "BTC-USD").
    start_date: str
        A string representing the start date of the dataset to use (e.g. "2021-01-01").
    end_date: str
        A string representing the end date of the dataset to use (e.g. "2021-12-31").
    prompt: str
        A string representing the user's question or prompt.

    Returns:
    --------
    response: str
        A string representing the response generated by the chatbot based on the user's prompt.
    """

    # Download the cryptocurrency data
    data = yf.download(crypto, start=start_date, end=end_date)
    
    # Write data to a CSV file
    data.to_csv(f"{crypto}.csv")

    # Create the Langchain agent
    load_dotenv()
    os.environ["OPENAI_API_KEY"] = os.getenv('OPENAI_API_KEY')
    agent = create_csv_agent(
        OpenAI(temperature=0),
        f"{crypto}.csv",
        verbose=True
    )

    # Run the agent to generate a response based on the user's prompt
    response = agent.run(prompt)

    return response

# Define the cryptocurrency options
cryptos = ['BTC-USD', 'ETH-USD', 'XRP-USD', 'BCH-USD', 'LTC-USD', 'DOGE-USD', 'USDT-USD', 'ADA-USD', 'BNB-USD', 'LINK-USD', 'XLM-USD', 'SOL1-USD', 'THETA-USD', 'ETC-USD', 'FIL-USD', 'TRX-USD', 'EOS-USD', 'XMR-USD', 'AVAX-USD']

# Get user input
crypto = st.sidebar.selectbox("Select a cryptocurrency", cryptos)
start_date = st.sidebar.date_input("Select a start date")
end_date = st.sidebar.date_input("Select an end date")

# Define a function to download the cryptocurrency data
def download_data():
    data = yf.download(crypto, start=start_date, end=end_date)
    data.to_csv(f"{crypto}.csv")
    st.success(f"Data for {crypto} downloaded successfully!")

# Add a "Download Data" button
if st.sidebar.button("Download Data"):
    download_data()


# Initialize variables for the while loop
response = ''
prompt = ''
stop_conversation = False

while not stop_conversation:
    # Get user input
    import uuid

    unique_str = str(uuid.uuid4())
    prompt = st.text_input("Enter your question or prompt", key=unique_str)

    # Generate response based on user input
    response = generate_crypto_responses(crypto, start_date, end_date, prompt)

    # Display the response to the user
    st.write("Response:", response)

    # Ask user if they want to continue or stop
    stop_conversation = st.button("Stop conversation")
